{"version":3,"sources":["webpack:///./src/Components/Heading.js","webpack:///./src/Components/Layout.js","webpack:///./src/pages/work.js","webpack:///./src/Components/SecondaryButton.js","webpack:///./node_modules/focus-visible/dist/focus-visible.js","webpack:///./src/Components/about.module.css","webpack:///./src/Components/Section.js"],"names":["Heading","props","PageTitle","styled","h1","title","Layout","useState","open","setOpen","className","layoutStyles","container","class","mobilenavbar","to","logo","content","children","WorkPage","SecondaryButton","LinkButton","GatsbyLink","device","desktop","link","role","LayoutStyles","sink","text","icon","style","paddingLeft","size","applyFocusVisiblePolyfill","scope","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","search","url","tel","email","password","number","date","month","week","time","datetime","isValidFocusTarget","el","document","nodeName","classList","addFocusVisibleClass","contains","add","setAttribute","onPointerDown","e","addInitialPointerMoveListeners","addEventListener","onInitialPointerMove","target","toLowerCase","removeEventListener","metaKey","altKey","ctrlKey","activeElement","visibilityState","type","tagName","readOnly","isContentEditable","hasAttribute","window","clearTimeout","setTimeout","remove","removeAttribute","nodeType","Node","DOCUMENT_FRAGMENT_NODE","host","DOCUMENT_NODE","documentElement","event","CustomEvent","error","createEvent","initCustomEvent","dispatchEvent","factory","module","exports","Section","Container","section","h2"],"mappings":"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","file":"component---src-pages-work-js-bbbe81eafebb97a5de3f.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Heading = props => {\n  const PageTitle = styled.h1`\n    margin-left: 0;\n    margin-right: 0;\n    margin-top: 0;\n    padding-bottom: 0;\n    padding-left: 0;\n    padding-right: 0;\n    padding-top: 0;\n    margin-bottom: 1.45rem;\n    color: #000000;\n    font-family: \"Bebas Neue\", sans-serif;\n    font-size: 3.052em;\n    font-weight: bold;\n    line-height: 1.1;\n  `\n\n  return <PageTitle>{props.title}</PageTitle>\n}\n\nexport default Heading\n","import React, { useState } from \"react\"\n// import \"../Styles/index.css\";\nimport \"../Styles/style.css\"\nimport layoutStyles from \"./layout.module.css\"\nimport Footer from \"./Footer\"\nimport \"typeface-source-sans-pro\"\nimport \"typeface-bebas-neue\"\nimport \"typeface-poppins\"\nimport \"focus-visible\"\nimport Menu from \"./Menu\"\nimport Burger from \"./Burger\"\nimport Navigation from \"./Navigation\"\nimport { Link } from \"gatsby\"\n\nconst Layout = props => {\n  const [open, setOpen] = useState(false)\n\n  return (\n    <div className={layoutStyles.container}>\n      <Navigation />\n      <div class={layoutStyles.mobilenavbar}>\n        <Link to=\"/\" className={layoutStyles.logo}>\n          George Simpson\n        </Link>\n        <div>\n          <Burger open={open} setOpen={setOpen} />\n          <Menu open={open} setOpen={setOpen} />\n        </div>\n      </div>\n\n      <main className={layoutStyles.content}>{props.children}</main>\n      <Footer />\n    </div>\n  )\n}\n\nexport default Layout\n","import React from \"react\"\nimport Layout from \"../Components/Layout\"\nimport { Link } from \"gatsby\"\nimport Heading from \"../Components/Heading\"\nimport Navigation from \"../Components/Navigation\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport About from \"../Components/About\"\n\nconst WorkPage = () => {\n  return (\n\n      <Layout>\n        <Heading title=\"Work\" />\n       \n      </Layout>\n  )\n}\n\nexport default WorkPage\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Link as GatsbyLink } from \"gatsby\"\nimport { device } from \"./ComponentStyles/Device\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport LayoutStyles from \"./layout.module.css\"\n\nconst SecondaryButton = props => {\n  const LinkButton = styled(GatsbyLink)`\n    font-family: \"Futura PT\", sans-serif;\n    font-size: 0.9em;\n    font-weight: bold;\n    color: #ffffff;\n    background-color: var(--olivegreen);\n    margin: 0.5em;\n    cursor: pointer;\n    padding: 0.5em 1.2em;\n    /*border: solid var(--olivegreen) 3px;*/\n    border-radius: 50px;\n    text-decoration: none;\n    /*box-shadow: 3px 3px 6px 1px #828282b5; */\n    width: 50%;\n    text-align: center;\n\n    &:hover {\n      background-color: var(--seablue);\n      transition: 0.3s ease-in-out;\n      color: var(--sand);\n    }\n\n\n    @media ${device.desktop} {\n      font-size: 1em;\n      padding: 0.5em 2em;\n    }\n  `\n\n  const iconStyle = {\n    paddingLeft: \"0.3em\",\n  }\n\n  return (\n    <LinkButton to={props.link} role=\"button\" className={LayoutStyles.sink}>\n      {props.text} <FontAwesomeIcon icon=\"arrow-right\" style={iconStyle} size=\"lg\"/>\n    </LinkButton>\n  )\n}\n\nexport default SecondaryButton\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory() : typeof define === 'function' && define.amd ? define(factory) : factory();\n})(this, function () {\n  'use strict';\n  /**\n   * Applies the :focus-visible polyfill at the given scope.\n   * A scope in this case is either the top-level Document or a Shadow Root.\n   *\n   * @param {(Document|ShadowRoot)} scope\n   * @see https://github.com/WICG/focus-visible\n   */\n\n  function applyFocusVisiblePolyfill(scope) {\n    var hadKeyboardEvent = true;\n    var hadFocusVisibleRecently = false;\n    var hadFocusVisibleRecentlyTimeout = null;\n    var inputTypesWhitelist = {\n      text: true,\n      search: true,\n      url: true,\n      tel: true,\n      email: true,\n      password: true,\n      number: true,\n      date: true,\n      month: true,\n      week: true,\n      time: true,\n      datetime: true,\n      'datetime-local': true\n    };\n    /**\n     * Helper function for legacy browsers and iframes which sometimes focus\n     * elements like document, body, and non-interactive SVG.\n     * @param {Element} el\n     */\n\n    function isValidFocusTarget(el) {\n      if (el && el !== document && el.nodeName !== 'HTML' && el.nodeName !== 'BODY' && 'classList' in el && 'contains' in el.classList) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Computes whether the given element should automatically trigger the\n     * `focus-visible` class being added, i.e. whether it should always match\n     * `:focus-visible` when focused.\n     * @param {Element} el\n     * @return {boolean}\n     */\n\n\n    function focusTriggersKeyboardModality(el) {\n      var type = el.type;\n      var tagName = el.tagName;\n\n      if (tagName === 'INPUT' && inputTypesWhitelist[type] && !el.readOnly) {\n        return true;\n      }\n\n      if (tagName === 'TEXTAREA' && !el.readOnly) {\n        return true;\n      }\n\n      if (el.isContentEditable) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Add the `focus-visible` class to the given element if it was not added by\n     * the author.\n     * @param {Element} el\n     */\n\n\n    function addFocusVisibleClass(el) {\n      if (el.classList.contains('focus-visible')) {\n        return;\n      }\n\n      el.classList.add('focus-visible');\n      el.setAttribute('data-focus-visible-added', '');\n    }\n    /**\n     * Remove the `focus-visible` class from the given element if it was not\n     * originally added by the author.\n     * @param {Element} el\n     */\n\n\n    function removeFocusVisibleClass(el) {\n      if (!el.hasAttribute('data-focus-visible-added')) {\n        return;\n      }\n\n      el.classList.remove('focus-visible');\n      el.removeAttribute('data-focus-visible-added');\n    }\n    /**\n     * If the most recent user interaction was via the keyboard;\n     * and the key press did not include a meta, alt/option, or control key;\n     * then the modality is keyboard. Otherwise, the modality is not keyboard.\n     * Apply `focus-visible` to any current active element and keep track\n     * of our keyboard modality state with `hadKeyboardEvent`.\n     * @param {KeyboardEvent} e\n     */\n\n\n    function onKeyDown(e) {\n      if (e.metaKey || e.altKey || e.ctrlKey) {\n        return;\n      }\n\n      if (isValidFocusTarget(scope.activeElement)) {\n        addFocusVisibleClass(scope.activeElement);\n      }\n\n      hadKeyboardEvent = true;\n    }\n    /**\n     * If at any point a user clicks with a pointing device, ensure that we change\n     * the modality away from keyboard.\n     * This avoids the situation where a user presses a key on an already focused\n     * element, and then clicks on a different element, focusing it with a\n     * pointing device, while we still think we're in keyboard modality.\n     * @param {Event} e\n     */\n\n\n    function onPointerDown(e) {\n      hadKeyboardEvent = false;\n    }\n    /**\n     * On `focus`, add the `focus-visible` class to the target if:\n     * - the target received focus as a result of keyboard navigation, or\n     * - the event target is an element that will likely require interaction\n     *   via the keyboard (e.g. a text box)\n     * @param {Event} e\n     */\n\n\n    function onFocus(e) {\n      // Prevent IE from focusing the document or HTML element.\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\n        addFocusVisibleClass(e.target);\n      }\n    }\n    /**\n     * On `blur`, remove the `focus-visible` class from the target.\n     * @param {Event} e\n     */\n\n\n    function onBlur(e) {\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (e.target.classList.contains('focus-visible') || e.target.hasAttribute('data-focus-visible-added')) {\n        // To detect a tab/window switch, we look for a blur event followed\n        // rapidly by a visibility change.\n        // If we don't see a visibility change within 100ms, it's probably a\n        // regular focus change.\n        hadFocusVisibleRecently = true;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n        hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n          hadFocusVisibleRecently = false;\n        }, 100);\n        removeFocusVisibleClass(e.target);\n      }\n    }\n    /**\n     * If the user changes tabs, keep track of whether or not the previously\n     * focused element had .focus-visible.\n     * @param {Event} e\n     */\n\n\n    function onVisibilityChange(e) {\n      if (document.visibilityState === 'hidden') {\n        // If the tab becomes active again, the browser will handle calling focus\n        // on the element (Safari actually calls it twice).\n        // If this tab change caused a blur on an element with focus-visible,\n        // re-apply the class when the user switches back to the tab.\n        if (hadFocusVisibleRecently) {\n          hadKeyboardEvent = true;\n        }\n\n        addInitialPointerMoveListeners();\n      }\n    }\n    /**\n     * Add a group of listeners to detect usage of any pointing devices.\n     * These listeners will be added when the polyfill first loads, and anytime\n     * the window is blurred, so that they are active when the window regains\n     * focus.\n     */\n\n\n    function addInitialPointerMoveListeners() {\n      document.addEventListener('mousemove', onInitialPointerMove);\n      document.addEventListener('mousedown', onInitialPointerMove);\n      document.addEventListener('mouseup', onInitialPointerMove);\n      document.addEventListener('pointermove', onInitialPointerMove);\n      document.addEventListener('pointerdown', onInitialPointerMove);\n      document.addEventListener('pointerup', onInitialPointerMove);\n      document.addEventListener('touchmove', onInitialPointerMove);\n      document.addEventListener('touchstart', onInitialPointerMove);\n      document.addEventListener('touchend', onInitialPointerMove);\n    }\n\n    function removeInitialPointerMoveListeners() {\n      document.removeEventListener('mousemove', onInitialPointerMove);\n      document.removeEventListener('mousedown', onInitialPointerMove);\n      document.removeEventListener('mouseup', onInitialPointerMove);\n      document.removeEventListener('pointermove', onInitialPointerMove);\n      document.removeEventListener('pointerdown', onInitialPointerMove);\n      document.removeEventListener('pointerup', onInitialPointerMove);\n      document.removeEventListener('touchmove', onInitialPointerMove);\n      document.removeEventListener('touchstart', onInitialPointerMove);\n      document.removeEventListener('touchend', onInitialPointerMove);\n    }\n    /**\n     * When the polfyill first loads, assume the user is in keyboard modality.\n     * If any event is received from a pointing device (e.g. mouse, pointer,\n     * touch), turn off keyboard modality.\n     * This accounts for situations where focus enters the page from the URL bar.\n     * @param {Event} e\n     */\n\n\n    function onInitialPointerMove(e) {\n      // Work around a Safari quirk that fires a mousemove on <html> whenever the\n      // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\n      if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {\n        return;\n      }\n\n      hadKeyboardEvent = false;\n      removeInitialPointerMoveListeners();\n    } // For some kinds of state, we are interested in changes at the global scope\n    // only. For example, global pointer input, global key presses and global\n    // visibility change should affect the state at every scope:\n\n\n    document.addEventListener('keydown', onKeyDown, true);\n    document.addEventListener('mousedown', onPointerDown, true);\n    document.addEventListener('pointerdown', onPointerDown, true);\n    document.addEventListener('touchstart', onPointerDown, true);\n    document.addEventListener('visibilitychange', onVisibilityChange, true);\n    addInitialPointerMoveListeners(); // For focus and blur, we specifically care about state changes in the local\n    // scope. This is because focus / blur events that originate from within a\n    // shadow root are not re-dispatched from the host element if it was already\n    // the active element in its own scope:\n\n    scope.addEventListener('focus', onFocus, true);\n    scope.addEventListener('blur', onBlur, true); // We detect that a node is a ShadowRoot by ensuring that it is a\n    // DocumentFragment and also has a host property. This check covers native\n    // implementation and polyfill implementation transparently. If we only cared\n    // about the native implementation, we could just check if the scope was\n    // an instance of a ShadowRoot.\n\n    if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {\n      // Since a ShadowRoot is a special kind of DocumentFragment, it does not\n      // have a root element to add a class to. So, we add this attribute to the\n      // host element instead:\n      scope.host.setAttribute('data-js-focus-visible', '');\n    } else if (scope.nodeType === Node.DOCUMENT_NODE) {\n      document.documentElement.classList.add('js-focus-visible');\n      document.documentElement.setAttribute('data-js-focus-visible', '');\n    }\n  } // It is important to wrap all references to global window and document in\n  // these checks to support server-side rendering use cases\n  // @see https://github.com/WICG/focus-visible/issues/199\n\n\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    // Make the polyfill helper globally available. This can be used as a signal\n    // to interested libraries that wish to coordinate with the polyfill for e.g.,\n    // applying the polyfill to a shadow root:\n    window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill; // Notify interested libraries of the polyfill's presence, in case the\n    // polyfill was loaded lazily:\n\n    var event;\n\n    try {\n      event = new CustomEvent('focus-visible-polyfill-ready');\n    } catch (error) {\n      // IE11 does not support using CustomEvent as a constructor directly:\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});\n    }\n\n    window.dispatchEvent(event);\n  }\n\n  if (typeof document !== 'undefined') {\n    // Apply the polyfill to the global document, so that no JavaScript\n    // coordination is required to use the polyfill in the top-level document:\n    applyFocusVisiblePolyfill(document);\n  }\n});","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"about-module--heading--3wSJ5\",\"blurb\":\"about-module--blurb--2N0Rj\",\"image\":\"about-module--image--jco3X\",\"bgroup\":\"about-module--bgroup--2Josb\",\"portrait\":\"about-module--portrait--22qmi\"};","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Section = props => {\n  const Container = styled.section`\n    margin: 0 auto;\n    width: 100%;\n    padding-top: 2em;\n  `\n\n  const Heading = styled.h2`\n    letter-spacing: -2px;\n  `\n  return (\n    <Container>\n      <Heading>{props.title}</Heading>\n      {props.children}\n    </Container>\n  )\n}\n\nexport default Section\n"],"sourceRoot":""}